name: Release

on:
  issue_comment:
    types: [created]

jobs:
  release:
    if: github.event.issue.pull_request && github.event.comment.body == '/release'
    runs-on: ubuntu-latest

    steps:
      - name: Check if commenter has write permission
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const commenter = context.payload.comment.user.login;
            const hasWriteAccess = collaborators.some(collaborator => 
              collaborator.login === commenter && 
              ['admin', 'write'].includes(collaborator.permissions.permission)
            );

            if (!hasWriteAccess) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Permission denied**: @${commenter} does not have write permission to trigger releases.`
              });
              throw new Error('User does not have write permission');
            }

            console.log(`✅ User ${commenter} has write permission`);

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            // Check if PR is merged
            if (!pr.merged) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Cannot release**: This PR is not merged yet. Please merge the PR first before triggering a release.`
              });
              throw new Error('PR is not merged');
            }

            return {
              merged: pr.merged,
              merge_commit_sha: pr.merge_commit_sha,
              head_sha: pr.head.sha,
              base_ref: pr.base.ref
            };

      - name: Checkout merged code
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.pr-details.outputs.result).merge_commit_sha }}

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Extract changelog from comment
        id: extract-changelog
        uses: actions/github-script@v7
        with:
          script: |
            // 获取所有评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // 查找最新的 changelog 模板评论
            const changelogComments = comments.data.filter(comment => 
              comment.body.includes('## Changelog') &&
              (comment.body.includes('Please edit this comment') || 
               comment.body.includes('add your') ||
               !comment.body.includes('Please edit this comment'))  // 包括已编辑的
            ).sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));

            if (changelogComments.length === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **No changelog found**: Please create a changelog comment first using the template provided when the version was changed.`
              });
              throw new Error('No changelog comment found');
            }

            const latestChangelogComment = changelogComments[0];
            let changelog = latestChangelogComment.body;

            // 移除 "Please edit this comment" 说明文字
            changelog = changelog.replace(/\*\*Please edit this comment[^*]*\*\*\s*/g, '');

            // 检查是否还是模板内容（包含提示文字）
            const isStillTemplate = changelog.includes('(add your') || 
                                   changelog.includes('add your new features here') ||
                                   changelog.includes('add your bug fixes here');

            if (isStillTemplate) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Changelog not ready**: The changelog comment still contains template placeholders. Please edit the changelog comment to add real changelog content before triggering the release.`
              });
              throw new Error('Changelog is still template');
            }

            console.log('Extracted changelog:', changelog);

            // 写入文件供后续步骤使用
            const fs = require('fs');
            fs.writeFileSync('changelog.md', changelog.trim());

            return { changelog: changelog.trim() };

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@latest --activate

      - name: Install vsce
        run: npm add -g vsce

      - name: Install dependencies
        run: pnpm install

      - name: Compile TypeScript
        run: pnpm run compile

      - name: Package extension
        run: pnpm run build:package

      - name: Upload release asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ steps.get-version.outputs.version }}.vsix
          path: ./*.vsix

      - name: Create GitHub Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.get-version.outputs.version }}';
            const tagName = `v${version}`;

            // 读取 changelog
            const fs = require('fs');
            const changelog = fs.readFileSync('changelog.md', 'utf8');

            try {
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: changelog,
                draft: false,
                prerelease: false,
                target_commitish: '${{ fromJson(steps.pr-details.outputs.result).merge_commit_sha }}'
              });
              
              console.log(`Created release: ${release.html_url}`);
              
              // 上传 .vsix 文件到 release
              const files = fs.readdirSync('.').filter(f => f.endsWith('.vsix'));
              if (files.length > 0) {
                const vsixFile = files[0];
                const fileData = fs.readFileSync(vsixFile);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: vsixFile,
                  data: fileData,
                });
                
                console.log(`Uploaded ${vsixFile} to release`);
              }
              
              // 评论成功信息
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚀 **Release created successfully!**\\n\\n` +
                      `📦 **Version**: ${tagName}\\n` +
                      `🔗 **Release URL**: ${release.html_url}\\n\\n` +
                      `The release has been published with the changelog from the comment above.`
              });
              
              return {
                release_url: release.html_url,
                tag_name: tagName
              };
              
            } catch (error) {
              console.error('Failed to create release:', error);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **Release failed**: ${error.message}\\n\\nPlease check the workflow logs for more details.`
              });
              
              throw error;
            }
