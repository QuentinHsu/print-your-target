name: Version Check

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: base

      - name: Check if package.json version changed
        id: version-check
        run: |
          # 获取 PR 中的版本
          PR_VERSION=$(jq -r .version package.json)

          # 获取基础分支的版本
          BASE_VERSION=$(jq -r .version base/package.json)

          echo "Base version: $BASE_VERSION"
          echo "PR version: $PR_VERSION"

          if [ "$PR_VERSION" != "$BASE_VERSION" ]; then
            echo "✅ Version changed from $BASE_VERSION to $PR_VERSION"
            echo "🚀 This PR will trigger a release when merged!"
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "pr-version=$PR_VERSION" >> $GITHUB_OUTPUT
            echo "base-version=$BASE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Version not changed (still $BASE_VERSION)"
            echo "📝 This PR will NOT trigger a release when merged"
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const versionChanged = '${{ steps.version-check.outputs.version-changed }}' === 'true';
            const prVersion = '${{ steps.version-check.outputs.pr-version }}';
            const baseVersion = '${{ steps.version-check.outputs.base-version }}';

            let message;
            if (versionChanged) {
              message = `🚀 **Ready for Release!**\n\nVersion will change from \`${baseVersion}\` to \`${prVersion}\` when this PR is merged.\n\n📝 **Please edit the comment below to add changelog, then comment \`/release\` to trigger the release:**`;
            } else {
              message = `📝 **No release will be triggered**\n\nThe version in \`package.json\` has not been changed (still \`${baseVersion}\`).\n\nTo trigger a release, please update the \`version\` field in \`package.json\`.`;
            }

            // 查找已存在的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              (comment.body.includes('Ready for Release') || 
               comment.body.includes('No release will be triggered'))
            );

            if (botComment) {
              // 更新已存在的评论
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

      - name: Create changelog template comment
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prVersion = '${{ steps.version-check.outputs.pr-version }}';

            const changelogTemplate = "## Changelog\\n\\n" +
              "**Please edit this comment to add your changelog content, then comment \`/release\` to trigger the release**\\n\\n" +
              "### Added\\n" +
              "- (add your new features here)\\n\\n" +
              "### Fixed\\n" +
              "- (add your bug fixes here)\\n\\n" +
              "### Changed\\n" +
              "- (add your changes here)\\n\\n" +
              "### Removed\\n" +
              "- (add removed features here)";

            // 查找是否已存在 changelog 模板评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const changelogComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Changelog') &&
              comment.body.includes('Please edit this comment')
            );

            if (!changelogComment) {
              // 创建新的 changelog 模板评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: changelogTemplate
              });
            }
