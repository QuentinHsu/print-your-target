name: Update PR Changelog

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to regenerate changelog for'
        required: true
        type: number
      force_update:
        description: 'Force update even if no version change detected'
        required: false
        type: boolean
        default: false

jobs:
  regenerate-changelog:
    runs-on: ubuntu-latest
    
    steps:
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ inputs.pr_number }};
            
            // 获取 PR 信息
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            if (pr.state !== 'open') {
              core.setFailed(`PR #${prNumber} is ${pr.state}, can only update open PRs`);
              return;
            }
            
            core.setOutput('pr-number', prNumber);
            core.setOutput('pr-body', pr.body || '');
            core.setOutput('head-ref', pr.head.ref);
            core.setOutput('head-sha', pr.head.sha);
            core.setOutput('base-ref', pr.base.ref);
            
            return {
              prNumber,
              prBody: pr.body || '',
              headRef: pr.head.ref,
              headSha: pr.head.sha,
              baseRef: pr.base.ref
            };

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.head-ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if package.json version changed
        id: version-check
        run: |
          # 获取当前分支的 package.json 版本
          if [ -f package.json ]; then
            CURRENT_VERSION=$(jq -r .version package.json)
          else
            echo "package.json not found"
            if [ "${{ inputs.force_update }}" = "true" ]; then
              echo "Force update enabled, continuing without version check"
              echo "version-changed=true" >> $GITHUB_OUTPUT
              echo "new-version=unknown" >> $GITHUB_OUTPUT
              echo "previous-version=unknown" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "version-changed=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # 获取 base 分支的 package.json 版本进行比较
          BASE_REF="${{ steps.pr-info.outputs.base-ref }}"
          git fetch origin $BASE_REF:$BASE_REF
          git show $BASE_REF:package.json > base_package.json 2>/dev/null || echo '{"version": "0.0.0"}' > base_package.json
          BASE_VERSION=$(jq -r .version base_package.json)
          
          echo "Base branch ($BASE_REF) version: $BASE_VERSION"
          echo "Current branch version: $CURRENT_VERSION"
          
          # 检查版本是否发生变化或强制更新
          if [ "$CURRENT_VERSION" != "$BASE_VERSION" ] || [ "${{ inputs.force_update }}" = "true" ]; then
            echo "Version changed from $BASE_VERSION to $CURRENT_VERSION (or force update enabled)"
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "previous-version=$BASE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version not changed and force update not enabled"
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract changelog from PR description
        id: extract-changelog
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = `${{ steps.pr-info.outputs.pr-body }}`;
            const prNumber = '${{ steps.pr-info.outputs.pr-number }}';
            const newVersion = '${{ steps.version-check.outputs.new-version }}';
            
            console.log('PR Body:', prBody);
            
            // 查找 ## Changelog 或 ## 更新日志 部分
            const changelogRegex = /(?:^|\n)##\s*(?:Changelog|更新日志|CHANGELOG)\s*\n([\s\S]*?)(?=\n##|\n---|\n```|$)/i;
            const match = prBody.match(changelogRegex);
            
            let changelog = '';
            if (match && match[1]) {
              changelog = match[1].trim();
              // 清理注释内容
              changelog = changelog.replace(/<!--[\s\S]*?-->/g, '').trim();
              // 清理空行
              changelog = changelog.replace(/\n\s*\n\s*\n/g, '\n\n');
              console.log('Changelog after removing comments:', changelog);
            }
            
            // 如果没有找到 changelog 或内容为空，尝试其他方法
            if (!changelog && prBody.trim()) {
              // 检查是否包含常见的 changelog 关键词
              const changelogKeywords = ['Feature', 'Fixed', 'Changed', 'Added', 'Removed', 'feat', 'fix', 'add', 'update', 'remove', '新增', '修复', '更新', '删除', '功能', '变更'];
              const hasChangelogKeywords = changelogKeywords.some(keyword => 
                prBody.toLowerCase().includes(keyword.toLowerCase())
              );
              
              if (hasChangelogKeywords) {
                // 尝试提取从 "### " 开始的内容作为 changelog
                const featureMatch = prBody.match(/###\s*(?:Feature|Added|Fixed|Changed|Removed|新增|修复|更新|变更|功能)[\s\S]*$/i);
                if (featureMatch) {
                  changelog = featureMatch[0].trim();
                  // 清理注释内容
                  changelog = changelog.replace(/<!--[\s\S]*?-->/g, '').trim();
                }
              }
            }
            
            // 如果没有找到 changelog 或内容为空，生成一个默认的
            if (!changelog) {
              changelog = `### Changed / 变更
            - Release v${newVersion}
            - 发布 v${newVersion} 版本
            
            Changes merged from PR #${prNumber}
            合并来自 PR #${prNumber} 的更改`;
            }
            
            console.log('Final changelog:', changelog);
            
            // 保存到文件
            const fs = require('fs');
            fs.writeFileSync('extracted-changelog.txt', changelog);
            
            return { changelog: changelog };

      - name: Remove existing changelog commits
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          NEW_VERSION="${{ steps.version-check.outputs.new-version }}"
          
          # 查找并删除现有的 changelog 提交
          echo "Looking for existing changelog commits for version $NEW_VERSION"
          
          # 获取最近的 10 个提交，查找 changelog 相关的提交
          CHANGELOG_COMMITS=$(git log --oneline -10 --grep="docs: update CHANGELOG.md for v$NEW_VERSION" --format="%H")
          
          if [ -n "$CHANGELOG_COMMITS" ]; then
            echo "Found existing changelog commits, removing them:"
            echo "$CHANGELOG_COMMITS"
            
            # 计算需要重置到的提交（最早的 changelog 提交的父提交）
            OLDEST_CHANGELOG_COMMIT=$(echo "$CHANGELOG_COMMITS" | tail -n 1)
            RESET_TO_COMMIT=$(git rev-parse "$OLDEST_CHANGELOG_COMMIT^")
            
            echo "Resetting to commit: $RESET_TO_COMMIT"
            git reset --hard "$RESET_TO_COMMIT"
          else
            echo "No existing changelog commits found"
          fi

      - name: Update CHANGELOG.md
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          # 读取版本和更新日志
          NEW_VERSION="${{ steps.version-check.outputs.new-version }}"
          CHANGELOG_CONTENT=$(cat extracted-changelog.txt)
          CURRENT_DATE=$(date +"%Y-%m-%d")
          
          echo "Updating CHANGELOG.md for version $NEW_VERSION"
          echo "Changelog content:"
          echo "$CHANGELOG_CONTENT"
          
          # 创建新的 changelog 条目
          cat > new_changelog_entry.md << EOF
          ## [$NEW_VERSION] - $CURRENT_DATE
          
          $CHANGELOG_CONTENT
          
          EOF
          
          # 更新 CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            echo "CHANGELOG.md exists, updating it"
            
            # 检查是否已经有这个版本的条目，如果有则跳过以避免重复
            if grep -q "^## \[$NEW_VERSION\]" CHANGELOG.md; then
              echo "Version $NEW_VERSION already exists in CHANGELOG.md, skipping update to avoid duplication"
            else
              echo "Adding new entry for version $NEW_VERSION to CHANGELOG.md"
              # 在第4行（标题和空行后）追加新内容，保持现有格式
              head -n 3 CHANGELOG.md > temp_changelog.md
              cat new_changelog_entry.md >> temp_changelog.md
              tail -n +4 CHANGELOG.md >> temp_changelog.md
              mv temp_changelog.md CHANGELOG.md
            fi
          else
            echo "CHANGELOG.md doesn't exist, creating new one"
            echo "# Change Log" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat new_changelog_entry.md >> CHANGELOG.md
          fi
          
          # 清理临时文件
          rm -f new_changelog_entry.md extracted-changelog.txt
          
          echo "CHANGELOG.md updated successfully"

      - name: Commit and push changes
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          # 配置 git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加所有变更
          git add .
          
          # 检查是否有变化需要提交
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            NEW_VERSION="${{ steps.version-check.outputs.new-version }}"
            echo "Committing changelog update for version $NEW_VERSION"
            
            git commit -m "docs: update CHANGELOG.md for v$NEW_VERSION"
            
            # 强制推送到 PR 分支
            echo "Pushing changes to PR branch"
            git push --force-with-lease origin HEAD
          fi

      - name: Add comment to PR
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ inputs.pr_number }};
            const newVersion = `${{ steps.version-check.outputs.new-version }}`;
            const forceUpdate = ${{ inputs.force_update }};
            
            const commentBody = `## 🔄 Changelog Regenerated
            
            **Version:** \`${newVersion}\`
            **Force update:** ${forceUpdate ? '✅ Yes' : '❌ No'}
            
            ✅ CHANGELOG.md has been regenerated with the latest changelog content from this PR description.
            
            The previous changelog commits (if any) have been removed and replaced with a new commit.
            
            ---
            
            ## 🔄 更新日志已重新生成
            
            **版本：** \`${newVersion}\`
            **强制更新：** ${forceUpdate ? '✅ 是' : '❌ 否'}
            
            ✅ CHANGELOG.md 已使用此 PR 描述中的最新更新日志内容重新生成。
            
            之前的更新日志提交（如有）已被删除并替换为新的提交。`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });

      - name: Summary
        if: steps.version-check.outputs.version-changed == 'false'
        run: |
          echo "No version change detected and force update not enabled."
          echo "To update changelog anyway, re-run this workflow with 'force_update' set to true."
